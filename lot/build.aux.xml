<?xml version="1.0" encoding="UTF-8"?>
<project name="aux" default="" basedir=".">
<description>auxiliary targets</description>
<property name="buildfile.aux.loaded" value="true"/>


<!-- start working with lot -->
<target name="genconf">
	<property name="genconf.output" value="${config.dir}/user.conf"/>
	<fail message="${genconf.output} file already exists">
		<condition><available file="${genconf.output}"/></condition>
	</fail>
	<if>
		<istrue value="${genconf.noinput}"/>
		<then>
			<property name="locale" value="${lot.locale.default}"/>
			<property name="genconf.lot.user.name" value="${lot.user.name}"/>
			<property name="genconf.lot.user.homepageURL" value="${lot.user.homepageURL}"/>
			<property name="genconf.firefox.langpack.guid" value="langpack-${locale}@firefox.l10n.jp"/>
			<property name="genconf.thunderbird.langpack.guid" value="langpack-${locale}@thunderbird.l10n.jp"/>
			<property name="genconf.fennec.langpack.guid" value="langpack-${locale}@fennec.l10n.jp"/>
		</then>
		<else>
			<echo message="Please answer some quetions to generate your user.conf file."/>
			<echo message="If you type enter without any input, default value will be used."/>
		</else>
	</if>
	<!-- ask common user dependent config -->
	<input addproperty="locale" defaultvalue="${lot.locale.default}"
		message="input your locale code (default: ${lot.locale.default})"/>
	<equals arg1="${locale}" arg2="ja" property="genconf.lot.lang" value="japanese" else="english"/>
	<input addproperty="genconf.lot.user.name" defaultvalue="${lot.user.name}"
		message="input your l10n community name (default: ${lot.user.name})"/>
	<input addproperty="genconf.lot.user.homepageURL" defaultvalue="${lot.user.homepageURL}"
		message="input your homepage url (default: ${lot.user.homepageURL})"/>
	<input addproperty="genconf.firefox.langpack.guid" defaultvalue="langpack-${locale}@firefox.l10n.jp"
		message="input your firefox langpack guid (default: langpack-${locale}@firefox.l10n.jp)"/>
	<input addproperty="genconf.thunderbird.langpack.guid" defaultvalue="langpack-${locale}@thunderbird.l10n.jp"
		message="input your thunderbird langpack guid (default: langpack-${locale}@thunderbird.l10n.jp)"/>
	<input addproperty="genconf.fennec.langpack.guid" defaultvalue="langpack-${locale}@fennec.l10n.jp"
		message="input your fennec langpack guid (default: langpack-${locale}@fennec.l10n.jp)"/>
	<!-- childbrowser specific configs -->
	<equals arg1="${genconf.type}" arg2="childbrowser" property="genconf.doreplace.onoff"		value="" else="#"/>
	<equals arg1="${genconf.type}" arg2="childbrowser" property="genconf.replace.file.6.onoff"	value="" else="#"/>
	<equals arg1="${genconf.type}" arg2="childbrowser" property="genconf.replace.file.ja.onoff"	value="#" else=""/>
	<equals arg1="${genconf.type}" arg2="childbrowser" property="genconf.charcheck.deny.onoff"	value="" else="#"/>
	<equals arg1="${genconf.type}" arg2="childbrowser" property="genconf.nowordcheck.onoff"		value="#"/>
	<!-- ja locale specific configs -->
	<equals arg1="${locale}" arg2="ja" property="genconf.nopluralcheck.onoff"			value="#" else=""/>
	<equals arg1="${locale}" arg2="ja" property="genconf.nowordcheck.onoff"				value="#" else=""/>
	<equals arg1="${locale}" arg2="ja" property="genconf.nosuspectedwordcheck.onoff"	value="#" else=""/>
	<equals arg1="${locale}" arg2="ja" property="genconf.nocharcheck.onoff"				value="#" else=""/>
	<!-- generate user.conf -->
	<copy file="${lot.res.dir}/template/user.conf" tofile="${genconf.output}">
		<filterchain><expandproperties/></filterchain>
	</copy>
	<echo message="${genconf.output} file is generated according to your input."/>
	<echo message="You can edit any setting anytime. See the file for more information."/>
</target>

<target name="remove-en-US">
	<available property="en-US.dir.exists" file="${lot.l10n.dir}/en-US" type="dir"/>
	<confirm message="${lot.l10n.dir}/en-US ディレクトリを削除してもよろしいですか？(Y/N)" if="en-US.dir.exists"/>
	<delete dir="${lot.l10n.dir}/en-US"/>
</target>

<target name="download-en-US" depends="load-mainconf, remove-en-US"
	description="downlaod and expand en-US l10n zip file">
	<mkdir dir="${lot.temp.dir}"/>
	<get src="${download.en-US.url}" dest="${lot.temp.dir}/en-US.zip"/>
	<unzip src="${lot.temp.dir}/en-US.zip" dest="${lot.l10n.dir}"/>
</target>

<target name="clone-locale" depends="load-mainconf"
	description="clone l10n mercurial repogitory from hg.mozilla.org">
	<property name="locale" value="${lot.locale.default}"/>
	<fail message="${lot.l10n.dir}/${locale} directory already exists">
		<condition><available file="${lot.l10n.dir}/${locale}"/></condition>
	</fail>
	<mkdir dir="${lot.l10n.dir}"/>
	<echo message="executing hg clone command:${N}hg clone ${l10n.repo.base}${locale} ${lot.l10n.dir}/${locale}"/>
	<exec executable="hg" taskname="hg">
		<arg line="clone ${l10n.repo.base}${locale} ${lot.l10n.dir}/${locale}"/>
	</exec>
	<if>
		<equals arg1="${locale}" arg2="ja"/>
		<then>
			<echo message="executing hg clone command:${N}hg clone ${l10n.repo.base}/ja-JP-mac ${lot.l10n.dir}/ja-JP-mac"/>
			<exec executable="hg" taskname="hg">
				<arg line="clone ${l10n.repo.base}/ja-JP-mac ${lot.l10n.dir}/ja-JP-mac"/>
			</exec>
		</then>
	</if>
</target>

<target name="newlocale" depends="load-mainconf"
	description="copy en-US files to your new locale">
	<property name="locale" value="${lot.locale.default}"/>
	<fail message="${lot.l10n.dir}/${locale} directory already exists">
		<condition><available dir="${lot.l10n.dir}/${locale}"/></condition>
	</fail>
	<copy todir="${lot.l10n.dir}/${locale}" preservelastmodified="true">
		<fileset dir="${lot.l10n.dir}/en-US"/>
	</copy>
</target>

<target name="checkout-src" depends="load-mainconf"
	description="checkout src files from l10n svn server (only for ja locale)">
	<property name="locale" value="${lot.locale.default}"/>
	<if>
		<equals arg1="${locale}" arg2="ja"/>
		<then>
			<input message="Japanese L10N SVN サーバのアカウント名を入力してください。アカウントを持っていないか、サーバにコミットする予定もない場合は何も入力しないでください。" addproperty="svn.username"/>
			<equals arg1="${svn.username}" arg2="" trim="true" property="svn.repo" value="http://svn.mozilla.l10n.jp/trunk/" else="svn+ssh://${svn.username}@svn.mozilla.l10n.jp/usr/local/var/svn/l10n/trunk/"/>
			<confirm message="次の SVN コマンドを実行してもよろしいですか？(Y/N)${N}svn checkout ${svn.repo} ${lot.src.dir}/l10n"/>
			<exec executable="svn" taskname="svn">
				<arg line="checkout ${svn.repo} ${lot.src.dir}/l10n"/>
			</exec>
			<if>
				<equals arg1="${genconf.type}" arg2="childbrowser"/>
				<then>
					<property name="svn.childbrowser.repo" value="svn+ssh://${svn.username}@svn.mozilla.l10n.jp/usr/local/var/svn/l10n/branches/childbrowser"/>
					<confirm message="次の SVN コマンドを実行してもよろしいですか？(Y/N)${N}svn checkout ${svn.childbrowser.repo} ${lot.src.dir}/l10n"/>
					<exec executable="svn" taskname="svn">
						<arg line="checkout ${svn.childbrowser.repo} ${lot.src.dir}/childbrowser"/>
					</exec>
				</then>
			</if>
		</then>
	</if>
</target>

<target name="setupl10n" depends="genconf, download-en-US, clone-locale, checkout-src"
	description="generate config file and get l10n files for your locale"/>
<target name="setupnewl10n" depends="genconf, download-en-US, newlocale"
	description="generate config file and get en-US files for your new locale"/>
<target name="setupchildbrowser">
	<antcall>
		<target name="genconf"/><target name="download-en-US"/><target name="checkout-src"/>
		<param name="genconf.type" value="childbrowser"/>
	</antcall>
</target>
	
<target name="genconf-alllocale" depends="load-mainconf">
	<groovy><![CDATA[
		properties.'alllocale.list'.eachMatch(/([a-zA-Z-]+)[\s,]*/) { a,locale ->
			ant.antcall(target:'genconf') {
				param(name: 'genconf.noinput', value: true)
				param(name: 'locale', value: locale)
				param(name: 'output', value: "${properties.'alllocale.config.dir'}/user.${locale}.conf")
			}
		}
	]]></groovy>
</target>
<target name="clone-alllocale" depends="load-mainconf">
	<groovy><![CDATA[
		properties.'alllocale.list'.eachMatch(/([a-zA-Z-]+)[\s,]*/) { a,locale ->
			ant.antcall(target:'clone-locale') { param(name: 'locale', value: locale) }
		}
	]]></groovy>
</target>
<target name="errorcheck-alllocale" depends="load-mainconf">
	<groovy><![CDATA[
		properties.'alllocale.list'.eachMatch(/([a-zA-Z-]+)[\s,]*/) { a,locale ->
			println "error checking $locale locale files..."
			// to avoid OutOfMemoryError without ANT_OPTS, folk with java task (not ant/subant)
			ant.java(classname: "org.apache.tools.ant.Main", fork: true, clonevm: true) {
				arg(line: "errorcheck -Dconfig.user.file='${properties.'alllocale.config.dir'}/user.${locale}.conf' -Dlot.log.dir='log/locales' -Dsyntaxcheck.failonerror=false -Dplaceholdercheck.failonerror=false -Dpluralcheck.failonerror=false")
			}
		}
	]]></groovy>
</target>
<target name="compare-alllocale" depends="load-mainconf">
	<groovy><![CDATA[
		properties.'alllocale.list'.eachMatch(/([a-zA-Z-]+)[\s,]*/) { a,locale ->
			println "comparing en-US and $locale locale files..."
			// to avoid OutOfMemoryError without ANT_OPTS, folk with java task (not ant/subant)
			ant.java(classname: "org.apache.tools.ant.Main", fork: true, clonevm: true) {
				arg(line: "compare -Dconfig.user.file='${properties.'alllocale.config.dir'}/user.${locale}.conf' -Dlot.log.dir='log/locales'")
			}
		}
	]]></groovy>
</target>
<target name="checksuite-alllocale" depends="errorcheck-alllocale, compare-alllocale"/>


<!-- * update and commit lot itself * -->
<target name="update-src" depends="load-mainconf"
	description="update src files in the working directory">
	<exec executable="svn" taskname="svn">
		<arg line="update ${lot.src.dir}/l10n"/>
	</exec>
</target>
<target name="update-lot" depends="load-mainconf"
	description="replace current lot with checkouted lot (src/l10n/lot)">
	<confirm message="現在使用中の Localization Tools を L10N SVN の最新バージョンで置き換えます。本当に置き換えてよろしいですか？(Y/N)"
		failmessage="Localization Tools の 置き換えを中止しました"/>
	<property name="update-lot.dir" value="${lot.src.dir}/l10n/lot"/>
	<exec executable="svn" taskname="svn">
		<arg line="update ${update-lot.dir}"/>
	</exec>
	<copy todir="." preservelastmodified="true" overwrite="true">
		<fileset dir="${update-lot.dir}" defaultexcludes="yes"
			includes="${backuplot.includes}" excludes="${backuplot.excludes}"/>
	</copy>
</target>
<target name="update" depends="update-src, update-lot"
	description="update src and lot itself from svn server"/>

<target name="pre-commit-lot" depends="load-mainconf"
	description="copy current lot to svn working directory (src/l10n/lot)">
	<copy todir="${lot.src.dir}/l10n/lot" preservelastmodified="true">
		<fileset dir="." defaultexcludes="no"
			includes="${backuplot.includes}" excludes="${backuplot.excludes}"/>
	</copy>
</target>
<target name="commit-lot" depends="pre-commit-lot"
	description="commit current lot to l10n svn server">
	<property name="commit-lot.dir" value="${lot.src.dir}/l10n/lot"/>
	<input message="コミットログを入力してください:"
		addproperty="commit-lot.message" defaultvalue=""/>
	<fail message="コミットログが指定されていません。">
		<condition><equals arg1="${commit-lot.message}" arg2="" trim="true"/></condition>
	</fail>
	<confirm message='${commit-lot.dir} ディレクトリで次の svn commit コマンドを実行しようとしています:${N}
		svn commit -m "${commit-lot.message}"${N}本当に実行してもよろしいですか？(Y/N)'
		failmessage="svn commit を中止しました。"/>
	<exec executable="svn" taskname="svn" dir="${commit-lot.dir}">
		<arg line='commit -m "${commit-lot.message}"'/>
	</exec>
</target>


<!-- * backup and restore * -->
<target name="backupsrc" depends="load-mainconf" unless="nobackup"
	description="backup whole src files">
	<mkdir dir="${backupsrc.dir}"/>
	<zip destfile="${backupsrc.file}">
		<zipfileset dir="." defaultexcludes="no"
			includes="${backupsrc.includes}" excludes="${backupsrc.excludes}"/>
	</zip>
</target>

<target name="restoresrc" depends="load-mainconf" unless="norestore"
	description="restore whole src files">
	<loadmessage pattern="^vmsg\.restoresrc\."/>
	<fail message="${vmsg.restoresrc.notfound}">
		<condition><not><available file="${restoresrc.file}" type="file"/></not></condition>
	</fail>
	<confirm message="${vmsg.restoresrc.confirm}" failmessage="${cmsg.restoresrc.cancelled}"/>
	
	<condition property="nobackup">
		<not><available file="${lot.src.dir}" type="dir"/></not>
	</condition>
	<antcall target="backupsrc"/>
	
	<unzip src="${restoresrc.file}" dest="${lot.temp.dir}/restore"/>
	<delete dir="${lot.src.dir}/"/>
	<move todir="${lot.src.dir}">
		<fileset dir="${lot.temp.dir}/restore/${lot.src.dir}"/>
	</move>
</target>

<target name="backuplot" depends="load-mainconf" unless="nobackup"
	description="zip localization tools">
	<mkdir dir="${backuplot.dir}"/>
	<zip destfile="${backuplot.file}">
		<zipfileset dir="." defaultexcludes="no"
			includes="${backuplot.includes}" excludes="${backuplot.excludes}"/>
	</zip>
</target>

<target name="backup" depends="load-mainconf" unless="nobackup"
	description="zip localization tools with src files">
	<mkdir dir="${backup.dir}"/>
	<zip destfile="${backup.file}">
		<zipfileset dir="." defaultexcludes="no"
			includes="${backup.includes}" excludes="${backup.excludes}"/>
	</zip>
</target>



<!-- * escape and unescape * -->
<!-- switching unicode escape from/to utf-8 (only *.properties files are escaped/unescaped and others are just copied by default) -->
<target name="-escape-jar-" depends="load-mainconf" if="escape.jar.file">
	<property name="escape.jar.dir" value="${escape.todir}"/>
	<zip taskname="JAR Packaging (${escape.jar.file})" destfile="${escape.jar.dir}/${escape.jar.file}" compress="false" update="false">
		<zipfileset dir="${escape.todir}/" excludes="${escape.jar.file}"/>
	</zip>
</target>
<target name="escape" depends="load-mainconf"
	description="escape *.properties files and copy other files">
	<loadmessage pattern="^vmsg\.escape\."/>
	<fail message="${vmsg.escape.no.fromdir}">
		<condition><not><available file="${escape.fromdir}" type="dir"/></not></condition>
	</fail>
	<escapeunicode-copy fromdir="${escape.fromdir}" todir="${escape.todir}" encoding="${escape.encoding}"
		includes="${escape.includes}" excludes="${escape.excludes}"
		escapeincludes="${escape.escapeincludes}" escapeexcludes="${escape.escapeexcludes}"/>
	<antcall target="-escape-jar-"/>
</target>

<target name="-unescape-jar-" depends="load-mainconf" if="unescape.jar.file">
	<unjar src="${unescape.jar.file}"
		dest="${unescape.fromdir}"/>
</target>
<target name="unescape" depends="load-mainconf, -unescape-jar-"
	description="unescape *.properties files and copy other files">
	<loadmessage pattern="^vmsg\.unescape\."/>
	<fail message="${vmsg.unescape.no.fromdir}">
		<condition><not><available file="${unescape.fromdir}" type="dir"/></not></condition>
	</fail>
	<unescapeunicode-copy fromdir="${unescape.fromdir}" todir="${unescape.todir}" encoding="${unescape.encoding}"
		includes="${unescape.includes}" excludes="${unescape.excludes}"
		unescapeincludes="${unescape.unescapeincludes}" unescapeexcludes="${unescape.unescapeexcludes}"/>
</target>



<!-- * en-US to l10n * -->
<target name="prepare-hg">
	<!-- prepare properties to make this script possible to use stand alone -->
	<property name="lot.temp.dir" value="temp"/>
	<property name="locale" value="ja"/>
	<property name="hg.mozilla.dir" value="comm-central/mozilla"/>
	<property name="hg.comm.dir" value="comm-central"/>
	<property name="hg.mobile.dir" value="mobile-browser"/>
</target>

<target name="mozilla-to-l10n" depends="prepare-hg"
	description="copy changing directory structure of en-US locale files within mozilla repository">
	<!-- prepare properties to make this script possible to use stand alone -->
	<property name="mozilla-to-l10n.temp.dir" value="${lot.temp.dir}/mozilla-to-l10n"/>
	<property name="mozilla-to-l10n.dir" value="${lot.l10n.dir}/en-US"/>
	
	<!-- cleaning -->
	<delete dir="${mozilla-to-l10n.temp.dir}"/>
	
	<!-- now, copy changing directory structure -->
	<copy todir="${mozilla-to-l10n.temp.dir}/en-US/browser"
		failonerror="false" preservelastmodified="true">
		<fileset dir="${hg.mozilla.dir}/browser/locales/en-US"/>
	</copy><!-- only firefox -->
	<copy todir="${mozilla-to-l10n.temp.dir}/en-US/dom"
		failonerror="false" preservelastmodified="true">
		<fileset dir="${hg.mozilla.dir}/dom/locales/en-US"/>
	</copy>
	<copy todir="${mozilla-to-l10n.temp.dir}/en-US/extensions/inspector/chrome"
		failonerror="false" preservelastmodified="true">
		<fileset dir="${hg.mozilla.dir}/extensions/inspector/resources/locale/en-US"/>
	</copy>
	<copy todir="${mozilla-to-l10n.temp.dir}/en-US/extensions/irc"
		failonerror="false" preservelastmodified="true">
		<fileset dir="${hg.mozilla.dir}/extensions/irc/locales/en-US"/>
	</copy>
	<copy todir="${mozilla-to-l10n.temp.dir}/en-US/extensions/spellcheck"
		failonerror="false" preservelastmodified="true">
		<fileset dir="${hg.mozilla.dir}/extensions/spellcheck/locales/en-US"/>
	</copy>
	<copy todir="${mozilla-to-l10n.temp.dir}/en-US/extensions/reporter"
		failonerror="false" preservelastmodified="true">
		<fileset dir="${hg.mozilla.dir}/extensions/reporter/locales/en-US"/>
	</copy>
	<copy todir="${mozilla-to-l10n.temp.dir}/en-US/extensions/venkman"
		failonerror="false" preservelastmodified="true">
		<fileset dir="${hg.mozilla.dir}/extensions/venkman/locales/en-US"/>
	</copy>
	<copy todir="${mozilla-to-l10n.temp.dir}/en-US/netwerk"
		failonerror="false" preservelastmodified="true">
		<fileset dir="${hg.mozilla.dir}/netwerk/locales/en-US"/>
	</copy>
	<copy todir="${mozilla-to-l10n.temp.dir}/en-US/other-licenses/branding/firefox"
		failonerror="false" preservelastmodified="true">
		<fileset dir="${hg.mozilla.dir}/other-licenses/branding/firefox/locales/en-US"/>
	</copy><!-- only firefox -->
	<copy todir="${mozilla-to-l10n.temp.dir}/en-US/security/manager"
		failonerror="false" preservelastmodified="true">
		<fileset dir="${hg.mozilla.dir}/security/manager/locales/en-US"/>
	</copy>
	<copy todir="${mozilla-to-l10n.temp.dir}/en-US/toolkit"
		failonerror="false" preservelastmodified="true">
		<fileset dir="${hg.mozilla.dir}/toolkit/locales/en-US"/>
	</copy>
	
	<mkdir dir="${mozilla-to-l10n.dir}"/>
	<move todir="${mozilla-to-l10n.dir}">
		<fileset dir="${mozilla-to-l10n.temp.dir}/en-US"/>
	</move>
</target>

<target name="comm-to-l10n" depends="prepare-hg"
	description="copy changing directory structure of en-US locale files within comm repository">
	<!-- prepare properties to make this script possible to use stand alone -->
	<property name="comm-to-l10n.temp.dir" value="${lot.temp.dir}/comm-to-l10n"/>
	<property name="comm-to-l10n.dir" value="${lot.l10n.dir}/en-US"/>
	
	<!-- cleaning -->
	<delete dir="${comm-to-l10n.temp.dir}"/>
	
	<!-- now, copy changing directory structure -->
	<copy todir="${comm-to-l10n.temp.dir}/en-US/calendar"
		failonerror="false" preservelastmodified="true">
		<fileset dir="${hg.comm.dir}/calendar/locales/en-US"/>
	</copy><!-- only sunbird -->
	<copy todir="${comm-to-l10n.temp.dir}/en-US/editor/ui"
		failonerror="false" preservelastmodified="true">
		<fileset dir="${hg.comm.dir}/editor/ui/locales/en-US"/>
	</copy><!-- only thunderbird -->
	<copy todir="${comm-to-l10n.temp.dir}/en-US/mail"
		failonerror="false" preservelastmodified="true">
		<fileset dir="${hg.comm.dir}/mail/locales/en-US"/>
	</copy><!-- only thunderbird -->
	<copy todir="${comm-to-l10n.temp.dir}/en-US/other-licenses/branding/sunbird"
		failonerror="false" preservelastmodified="true">
		<fileset dir="${hg.comm.dir}/other-licenses/branding/sunbird/locales/en-US"/>
	</copy><!-- only sunbird -->
	<copy todir="${comm-to-l10n.temp.dir}/en-US/other-licenses/branding/thunderbird"
		failonerror="false" preservelastmodified="true">
		<fileset dir="${hg.comm.dir}/other-licenses/branding/thunderbird/locales/en-US"/>
	</copy><!-- only thunderbird -->
	<copy todir="${comm-to-l10n.temp.dir}/en-US/suite"
		failonerror="false" preservelastmodified="true">
		<fileset dir="${hg.comm.dir}/suite/locales/en-US"/>
	</copy><!-- only seamonkey -->
	
	<mkdir dir="${comm-to-l10n.dir}"/>
	<move todir="${comm-to-l10n.dir}">
		<fileset dir="${comm-to-l10n.temp.dir}/en-US"/>
	</move>
</target>

<target name="mobile-to-l10n" depends="prepare-hg"
	description="copy changing directory structure of en-US locale files within mobile-browser">
	<property name="mobile-to-l10n.dir" value="${lot.l10n.dir}/en-US"/>
	<mkdir dir="${mobile-to-l10n.dir}/mobile"/>
	<copy todir="${mobile-to-l10n.dir}/mobile" failonerror="false" preservelastmodified="true">
		<fileset dir="${hg.mobile.dir}/locales/en-US"/>
	</copy>
</target>

<target name="en-US-to-l10n" depends="remove-en-US, mozilla-to-l10n, comm-to-l10n, mobile-to-l10n"
       description="copy changing directory structure of en-US locale files within both mozilla and comm repository"/>


<!-- * better to have * -->
<target name="imedic"
	description="generate IME dictionary for filters">
	<!-- 例えば "ウィンドウ" で "@@Window@@" に変換するための辞書を生成 -->
	<fail message="not implemented yet..."/>
</target>


</project>
